version: '3.8'

services:
  # PostgreSQL Database
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: vdt-postgres
  #   environment:
  #     POSTGRES_DB: vdt_live
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: admin
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init-db:/docker-entrypoint-initdb.d
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - vdt-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Backend Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vdt-backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/vdt_live
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SERVER_PORT=8080
      - STREAM_URL_BASE=localhost
    ports:
      - "8080:8080"
    volumes:
      - backend_uploads:/app/uploads
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    networks:
      - vdt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # # Frontend Service - Development
  # frontend-dev:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     target: development
  #     args:
  #       - VITE_API_BASE_URL=http://localhost:8080/api
  #       - VITE_STREAM_SERVER_URL=http://localhost:8888
  #   container_name: vdt-frontend-dev
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   networks:
  #     - vdt-network
  #   depends_on:
  #     - backend
  #   restart: unless-stopped

  # Frontend Service - Production
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_BASE_URL=http://localhost:8080/api
        - VITE_STREAM_SERVER_URL=http://localhost:8888
    container_name: vdt-frontend-prod
    ports:
      - "3000:80"
    networks:
      - vdt-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production  # MediaMTX Streaming Server
  mediamtx:
    build:
      context: .
      dockerfile: Dockerfile.mediamtx
    container_name: vdt-mediamtx
    ports:
      - "8554:8554"     # RTSP
      - "1935:1935"     # RTMP
      - "8888:8888"     # HLS
      - "8889:8889"     # HTTP API
      - "8890:8890/udp" # WebRTC Data
      - "8189:8189/udp" # WebRTC Control
    volumes:
      - ./mediamtx.yml:/mediamtx.yml
    networks:
      - vdt-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
        reservations:
          cpus: '0.125'
          memory: 256M    # healthcheck:
    #   test: ["CMD", "nc", "-z", "localhost", "8889"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  vdt-network:
    driver: bridge
