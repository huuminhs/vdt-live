version: '3.8'

services:
  # PostgreSQL Database
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: vdt-postgres
  #   environment:
  #     POSTGRES_DB: vdt_live
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: admin
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init-db:/docker-entrypoint-initdb.d
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - vdt-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5  # Backend Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: vdt-backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/vdt_live
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SERVER_PORT=8080
      - STREAM_URL_BASE=localhost
    ports:
      - "8080:8080"     # Backend API port
    volumes:
      - backend_uploads:/app/uploads
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    networks:
      - vdt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # # Frontend Service - Development
  # frontend-dev:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     target: development
  #     args:
  #       - VITE_API_BASE_URL=http://localhost:8080/api
  #       - VITE_STREAM_SERVER_URL=http://localhost:8888
  #   container_name: vdt-frontend-dev
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   networks:
  #     - vdt-network
  #   depends_on:
  #     - backend
  #   restart: unless-stopped  # Frontend Service - Production
  frontend-prod:    
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_BASE_URL=http://localhost:8080/api
        - VITE_STREAM_SERVER_URL=http://localhost:8888
    container_name: vdt-frontend-prod
    ports:
      - "3000:80"
    networks:
      - vdt-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production  # Traefik Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: vdt-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.rtmp.address=:1935"
      - "--entrypoints.hls.address=:8888"
      - "--entrypoints.whip.address=:8889"
      - "--entrypoints.webrtc.address=:8189"
    ports:
      - "8090:8080"     # Traefik Dashboard (moved to avoid backend conflict)
      - "1935:1935"     # RTMP Load Balancer
      - "8888:8888"     # HLS Load Balancer
      - "8889:8889"     # WHIP Load Balancer
      - "8189:8189"     # WebRTC TCP Load Balancer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - vdt-network
    restart: unless-stopped
  # MediaMTX Streaming Server #1
  mediamtx1:
    build:
      context: .
      dockerfile: Dockerfile.mediamtx
    container_name: vdt-mediamtx1
    expose:
      - "1935"          # RTMP
      - "8888"          # HLS
      - "8889"          # HTTP API/WHIP
      - "8189"          # WebRTC TCP
      - "9997"          # Control API    
    volumes:
      - ./mediamtx1.yml:/mediamtx.yml
    networks:
      - vdt-network    
    labels:
      - "traefik.enable=true"
      # RTMP routing
      - "traefik.tcp.routers.rtmp1.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.rtmp1.entrypoints=rtmp"
      - "traefik.tcp.routers.rtmp1.service=rtmp-service"
      - "traefik.tcp.services.rtmp-service.loadbalancer.server.port=1935"      # HLS routing - serverId=1
      - "traefik.http.routers.hls1.rule=PathRegexp(`^/stream/[^/]+/serverId/1(/.*)?$`)"
      - "traefik.http.routers.hls1.entrypoints=hls"
      - "traefik.http.routers.hls1.service=hls-service1"
      - "traefik.http.routers.hls1.middlewares=strip-serverid1"
      - "traefik.http.routers.hls1.priority=100"
      - "traefik.http.middlewares.strip-serverid1.replacepathregex.regex=^/stream/([^/]+)/serverId/1(/.*)?$"
      - "traefik.http.middlewares.strip-serverid1.replacepathregex.replacement=/stream/$1$2"
      - "traefik.http.services.hls-service1.loadbalancer.server.port=8888"
      # WHIP routing
      - "traefik.http.routers.whip1.rule=PathPrefix(`/`)"
      - "traefik.http.routers.whip1.entrypoints=whip"
      - "traefik.http.routers.whip1.service=whip-service"
      - "traefik.http.services.whip-service.loadbalancer.server.port=8889"
      - "traefik.http.services.whip-service.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.whip-service.loadbalancer.sticky.cookie.name=whip-session"
      - "traefik.http.services.whip-service.loadbalancer.sticky.cookie.secure=false"
      # WebRTC TCP routing
      - "traefik.tcp.routers.webrtc1.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.webrtc1.entrypoints=webrtc"
      - "traefik.tcp.routers.webrtc1.service=webrtc-service"
      - "traefik.tcp.services.webrtc-service.loadbalancer.server.port=8189"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
        reservations:
          cpus: '0.125'
          memory: 256M
    # healthcheck:
    #   test: ["CMD", "nc", "-z", "localhost", "8889"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    restart: unless-stopped
  # MediaMTX Streaming Server #2
  mediamtx2:
    build:
      context: .
      dockerfile: Dockerfile.mediamtx
    container_name: vdt-mediamtx2
    expose:
      - "1935"          # RTMP
      - "8888"          # HLS
      - "8889"          # HTTP API/WHIP
      - "8189"          # WebRTC TCP
      - "9997"          # Control API    
    volumes:
      - ./mediamtx2.yml:/mediamtx.yml
    networks:
      - vdt-network    
    labels:
      - "traefik.enable=true"
      # RTMP routing (same service as mediamtx1)
      - "traefik.tcp.routers.rtmp2.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.rtmp2.entrypoints=rtmp"
      - "traefik.tcp.routers.rtmp2.service=rtmp-service2"
      - "traefik.tcp.services.rtmp-service2.loadbalancer.server.port=1935"      # HLS routing - serverId=2
      - "traefik.http.routers.hls2.rule=PathRegexp(`^/stream/[^/]+/serverId/2(/.*)?$`)"
      - "traefik.http.routers.hls2.entrypoints=hls"
      - "traefik.http.routers.hls2.service=hls-service2"
      - "traefik.http.routers.hls2.middlewares=strip-serverid2"
      - "traefik.http.routers.hls2.priority=100"
      - "traefik.http.middlewares.strip-serverid2.replacepathregex.regex=^/stream/([^/]+)/serverId/2(/.*)?$"
      - "traefik.http.middlewares.strip-serverid2.replacepathregex.replacement=/stream/$1$2"
      - "traefik.http.services.hls-service2.loadbalancer.server.port=8888"
      # WHIP routing (same service as mediamtx1)
      - "traefik.http.routers.whip2.rule=PathPrefix(`/`)"
      - "traefik.http.routers.whip2.entrypoints=whip"
      - "traefik.http.routers.whip2.service=whip-service2"
      - "traefik.http.services.whip-service2.loadbalancer.server.port=8889"
      - "traefik.http.services.whip-service2.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.whip-service2.loadbalancer.sticky.cookie.name=whip-session"
      - "traefik.http.services.whip-service2.loadbalancer.sticky.cookie.secure=false"
      # WebRTC TCP routing (same service as mediamtx1)
      - "traefik.tcp.routers.webrtc2.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.webrtc2.entrypoints=webrtc"
      - "traefik.tcp.routers.webrtc2.service=webrtc-service2"
      - "traefik.tcp.services.webrtc-service2.loadbalancer.server.port=8189"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
        reservations:
          cpus: '0.125'
          memory: 256M
    # healthcheck:
    #   test: ["CMD", "nc", "-z", "localhost", "8889"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  vdt-network:
    driver: bridge
