global
    daemon
    maxconn 4096
    log stdout local0 info
    # Load Lua script for intelligent stream routing
    lua-load /usr/local/etc/haproxy/stream-router.lua
    # Remove problematic stats socket for now
    # stats socket /var/run/haproxy.sock mode 660 level admin

defaults
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    log global
    option dontlognull
    option redispatch
    retries 3

# HAProxy Stats Dashboard
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends

# RTMP Load Balancer (TCP mode)
frontend rtmp_frontend
    bind *:1935
    mode tcp
    option tcplog
    default_backend rtmp_backend

backend rtmp_backend
    mode tcp
    balance roundrobin
    server mediamtx1 mediamtx1:1935 check
    server mediamtx2 mediamtx2:1935 check

# WebRTC TCP Load Balancer
frontend webrtc_frontend
    bind *:8189
    mode tcp
    option tcplog
    default_backend webrtc_backend

backend webrtc_backend
    mode tcp
    balance roundrobin
    server mediamtx1 mediamtx1:8189 check
    server mediamtx2 mediamtx2:8189 check

# WHIP Load Balancer with Sticky Sessions (CRITICAL for WebRTC signaling!)
frontend whip_frontend
    bind *:8889
    mode http
    option httplog
    default_backend whip_backend

backend whip_backend
    mode http
    balance roundrobin
    # Sticky sessions using cookies - ESSENTIAL for WHIP WebRTC signaling
    cookie WHIP_SESSION insert indirect nocache httponly
    
    server mediamtx1 mediamtx1:8889 check cookie mediamtx1
    server mediamtx2 mediamtx2:8889 check cookie mediamtx2

# HLS Frontend with Intelligent Stream-Based Routing
frontend hls_frontend
    bind *:8888
    mode http
    option httplog
    
    # Create stick table to track stream-to-server mappings
    stick-table type string len 64 size 1000 expire 30m store server_id
    
    # Extract stream name from URL path for routing decisions
    http-request capture req.hdr(Host) len 32
    http-request capture path len 64
    
    # Define ACL rules for different types of HLS requests
    acl is_master_playlist path_end index.m3u8
    acl is_sub_playlist path_reg \.m3u8$ 
    acl is_hls_segment path_end .ts
    acl is_not_master_playlist path_reg [^/]+\.m3u8$
    
    # Extract stream name for all requests
    http-request lua.get_stream_path
    
    # For master playlists: use intelligent routing
    http-request lua.route_to_stream_server if is_master_playlist
    
    # For sub-playlists and segments: get cached server choice
    http-request lua.get_cached_server if is_not_master_playlist
    http-request lua.get_cached_server if is_hls_segment
    
    # Route master playlists to intelligent backend (uses Control API)
    use_backend hls_smart_backend if is_master_playlist
    
    # Route sub-playlists (non-master .m3u8) to sticky backend
    use_backend hls_sticky_backend if is_not_master_playlist
    
    # Route segments to sticky backend
    use_backend hls_sticky_backend if is_hls_segment
    
    # Fallback for non-stream requests (API calls, etc.)
    default_backend hls_fallback_backend

# Smart HLS Backend - Routes to servers based on stream availability
backend hls_smart_backend
    mode http
    balance roundrobin
    
    # Use Lua-determined target server if available
    use-server mediamtx1 if { var(req.target_server) -m str mediamtx1 }
    use-server mediamtx2 if { var(req.target_server) -m str mediamtx2 }
    
    # MediaMTX Control API checking with Lua script implemented above
    server mediamtx1 mediamtx1:8888 check inter 3s rise 2 fall 2
    server mediamtx2 mediamtx2:8888 check inter 3s rise 2 fall 2

# Sticky HLS Backend - Routes segments/sub-playlists to same server as master playlist
backend hls_sticky_backend
    mode http
    balance roundrobin
    
    # Use Lua-determined target server if available
    use-server mediamtx1 if { var(req.target_server) -m str mediamtx1 }
    use-server mediamtx2 if { var(req.target_server) -m str mediamtx2 }
    
    server mediamtx1 mediamtx1:8888 check inter 3s rise 2 fall 2
    server mediamtx2 mediamtx2:8888 check inter 3s rise 2 fall 2

# Fallback HLS Backend for general requests
backend hls_fallback_backend
    mode http
    balance roundrobin
    
    server mediamtx1 mediamtx1:8888 check
    server mediamtx2 mediamtx2:8888 check
