global
    daemon
    maxconn 4096
    log stdout local0 info
    # Remove problematic stats socket for now
    # stats socket /var/run/haproxy.sock mode 660 level admin

defaults
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    log global
    option dontlognull
    option redispatch
    retries 3

# HAProxy Stats Dashboard
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends

# RTMP Load Balancer (TCP mode)
frontend rtmp_frontend
    bind *:1935
    mode tcp
    option tcplog
    default_backend rtmp_backend

backend rtmp_backend
    mode tcp
    balance roundrobin
    server mediamtx1 mediamtx1:1935 check
    server mediamtx2 mediamtx2:1935 check

# WebRTC TCP Load Balancer
frontend webrtc_frontend
    bind *:8189
    mode tcp
    option tcplog
    default_backend webrtc_backend

backend webrtc_backend
    mode tcp
    balance roundrobin
    server mediamtx1 mediamtx1:8189 check
    server mediamtx2 mediamtx2:8189 check

# WHIP Load Balancer with Sticky Sessions (CRITICAL for WebRTC signaling!)
frontend whip_frontend
    bind *:8889
    mode http
    option httplog
    default_backend whip_backend

backend whip_backend
    mode http
    balance roundrobin
    # Sticky sessions using cookies - ESSENTIAL for WHIP WebRTC signaling
    cookie WHIP_SESSION insert indirect nocache httponly
    
    server mediamtx1 mediamtx1:8889 check cookie mediamtx1
    server mediamtx2 mediamtx2:8889 check cookie mediamtx2

# HLS Frontend with Intelligent Stream-Based Routing
frontend hls_frontend
    bind *:8888
    mode http
    option httplog
    
    # Extract stream name from URL path for routing decisions
    # Use simpler approach - capture first path segment 
    http-request capture req.hdr(Host) len 32
    http-request capture path len 64
    
    # Smart routing: check if this is a valid stream request
    acl is_stream_request path_reg ^/[^/]+/(index\.m3u8|.*\.ts)$
    acl is_hls_playlist path_end .m3u8
    acl is_hls_segment path_end .ts
    
    # Route HLS requests intelligently
    use_backend hls_smart_backend if is_stream_request
    use_backend hls_smart_backend if is_hls_playlist
    use_backend hls_smart_backend if is_hls_segment
    
    # Fallback for non-stream requests (API calls, etc.)
    default_backend hls_fallback_backend

# Smart HLS Backend - Routes to available servers
backend hls_smart_backend
    mode http
    balance first
    
    # Use simple TCP health checks instead of HTTP
    server mediamtx1 mediamtx1:8888 check inter 3s rise 2 fall 2
    server mediamtx2 mediamtx2:8888 check inter 3s rise 2 fall 2

# Fallback HLS Backend for general requests
backend hls_fallback_backend
    mode http
    balance roundrobin
    
    server mediamtx1 mediamtx1:8888 check
    server mediamtx2 mediamtx2:8888 check
